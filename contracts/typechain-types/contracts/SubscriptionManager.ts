/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SubscriptionManager {
  export type SubscriptionStruct = {
    subscriber: AddressLike;
    token: AddressLike;
    amount: BigNumberish;
    interval: BigNumberish;
    recipient: AddressLike;
    nextPayment: BigNumberish;
    active: boolean;
  };

  export type SubscriptionStructOutput = [
    subscriber: string,
    token: string,
    amount: bigint,
    interval: bigint,
    recipient: string,
    nextPayment: bigint,
    active: boolean
  ] & {
    subscriber: string;
    token: string;
    amount: bigint;
    interval: bigint;
    recipient: string;
    nextPayment: bigint;
    active: boolean;
  };
}

export interface SubscriptionManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelSubscription"
      | "createSubscription"
      | "executeSubscriptionPayment"
      | "getActiveSubscriptions"
      | "getSubscription"
      | "owner"
      | "renounceOwnership"
      | "subscriptionCount"
      | "subscriptions"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "PaymentExecuted"
      | "SubscriptionCancelled"
      | "SubscriptionCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscription",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSubscriptionPayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveSubscriptions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSubscriptionPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentExecutedEvent {
  export type InputTuple = [subscriptionId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [subscriptionId: bigint, amount: bigint];
  export interface OutputObject {
    subscriptionId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCancelledEvent {
  export type InputTuple = [subscriptionId: BigNumberish];
  export type OutputTuple = [subscriptionId: bigint];
  export interface OutputObject {
    subscriptionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCreatedEvent {
  export type InputTuple = [
    subscriptionId: BigNumberish,
    subscriber: AddressLike,
    recipient: AddressLike
  ];
  export type OutputTuple = [
    subscriptionId: bigint,
    subscriber: string,
    recipient: string
  ];
  export interface OutputObject {
    subscriptionId: bigint;
    subscriber: string;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SubscriptionManager extends BaseContract {
  connect(runner?: ContractRunner | null): SubscriptionManager;
  waitForDeployment(): Promise<this>;

  interface: SubscriptionManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelSubscription: TypedContractMethod<
    [_subscriptionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createSubscription: TypedContractMethod<
    [
      _token: AddressLike,
      _amount: BigNumberish,
      _interval: BigNumberish,
      _recipient: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  executeSubscriptionPayment: TypedContractMethod<
    [_subscriptionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveSubscriptions: TypedContractMethod<[], [bigint[]], "view">;

  getSubscription: TypedContractMethod<
    [_subscriptionId: BigNumberish],
    [SubscriptionManager.SubscriptionStructOutput],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  subscriptionCount: TypedContractMethod<[], [bigint], "view">;

  subscriptions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, string, bigint, boolean] & {
        subscriber: string;
        token: string;
        amount: bigint;
        interval: bigint;
        recipient: string;
        nextPayment: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelSubscription"
  ): TypedContractMethod<[_subscriptionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createSubscription"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _amount: BigNumberish,
      _interval: BigNumberish,
      _recipient: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeSubscriptionPayment"
  ): TypedContractMethod<[_subscriptionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveSubscriptions"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getSubscription"
  ): TypedContractMethod<
    [_subscriptionId: BigNumberish],
    [SubscriptionManager.SubscriptionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "subscriptionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "subscriptions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, string, bigint, boolean] & {
        subscriber: string;
        token: string;
        amount: bigint;
        interval: bigint;
        recipient: string;
        nextPayment: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentExecuted"
  ): TypedContractEvent<
    PaymentExecutedEvent.InputTuple,
    PaymentExecutedEvent.OutputTuple,
    PaymentExecutedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCancelled"
  ): TypedContractEvent<
    SubscriptionCancelledEvent.InputTuple,
    SubscriptionCancelledEvent.OutputTuple,
    SubscriptionCancelledEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCreated"
  ): TypedContractEvent<
    SubscriptionCreatedEvent.InputTuple,
    SubscriptionCreatedEvent.OutputTuple,
    SubscriptionCreatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymentExecuted(uint256,uint256)": TypedContractEvent<
      PaymentExecutedEvent.InputTuple,
      PaymentExecutedEvent.OutputTuple,
      PaymentExecutedEvent.OutputObject
    >;
    PaymentExecuted: TypedContractEvent<
      PaymentExecutedEvent.InputTuple,
      PaymentExecutedEvent.OutputTuple,
      PaymentExecutedEvent.OutputObject
    >;

    "SubscriptionCancelled(uint256)": TypedContractEvent<
      SubscriptionCancelledEvent.InputTuple,
      SubscriptionCancelledEvent.OutputTuple,
      SubscriptionCancelledEvent.OutputObject
    >;
    SubscriptionCancelled: TypedContractEvent<
      SubscriptionCancelledEvent.InputTuple,
      SubscriptionCancelledEvent.OutputTuple,
      SubscriptionCancelledEvent.OutputObject
    >;

    "SubscriptionCreated(uint256,address,address)": TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;
    SubscriptionCreated: TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;
  };
}
